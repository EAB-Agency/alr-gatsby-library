@use "sass:color";
@use "sass:math";
@use "styles/sass/foundation/config" as *;
@use "styles/sass/foundation/components" as *;


$d-gridCalc: calc(#{math.div((100% - $d-centerWidth), 2)});
$d-gridMaxWidth: math.div($d-centerMaxWidth, 1.8);


.apply-v2 {
  .lp-apply {
    @include applyFormInlineEmail("(min-width: #{$mq-500}) and (max-width: #{$mq-800})");
    @include applyFormInlineEmail("(min-width: #{$mq-1200})");
    background: $c-white;
    padding: 0;

    .lp-apply-content {
      padding: 4vw 0;
    }

    @media (max-width: maxMQ($mq-800)) {
      &::before {
        content: "";
        display: block;
        width: 100%;
        height: 35vw;
        max-height: 18rem;
        background: $c-black url(#{$x-imgAssetPath}img-woman-cafe.jpg) no-repeat right center / cover;
      }
    }
    
    @media (min-width: $mq-800) {
      >.center {
        width: 100%;
        max-width: none;
        display: grid;
        // Change % in variable at top to match your .center width being used throughout
        grid-template-columns: $d-gridCalc 1fr 3% 1fr $d-gridCalc;
        // Two layout options (grid area) - comment out what you do want
        grid-template-areas: "space apply gap image image";
        // grid-template-areas: "image image gap apply space";
  
        &::after {
          content: "";
          display: block;
          width: 100%;
          height: 100%;
          background: $c-black url(#{$x-imgAssetPath}img-woman-cafe-lg.jpg) no-repeat right center / cover;
          grid-area: image;
        }
      }
  
      .lp-apply-content {
        padding: 6vw 0;
        grid-area: apply;
      }
    }

    @media (min-width: $mq-1600) {
      >.center {
        // adjust math.div formula at top for different widths
        grid-template-columns: auto $d-gridMaxWidth 3% $d-gridMaxWidth auto;
      }
    }
  }
}
